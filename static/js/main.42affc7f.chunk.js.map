{"version":3,"sources":["Model/Results.js","Model/ElEscorial.js","Model/AirlieHouse.js","Model/AwajiShima.js","Model/GoldCoast.js","Components/Panel/Panel.js","Components/DiagnosisResults/DiagnosisResults.js","App.js","serviceWorker.js","index.js"],"names":["Results","Object","classCallCheck","this","diagnosis","result","calculateDiagnosis","ElEscorial","selections","UMNLevel","calcHighestLevel","LMNLevel","regionsWithUMN","countRegions","regionsWithLMN","spinalRegionsWithUMN","countSpinalRegions","spinalRegionsWithLMN","UMNAndLMNInBrainstem","containsTwoFindingsInOneRegion","explanation","tilt","areBothFindingsPresentInOneRegion","finding","i","regions","length","isFindingPresent","id","count","finding1","finding2","region","isPhysicalFindingPresent","regionIndex","findIndex","r","AirlieHouse","_this","possibleConstructorReturn","getPrototypeOf","call","regionsWithLMNByPhysicalOnly","countPhysicalRegions","regionsWithLMNByEMGOnly","countLMNRegionsByEMG","spinalRegionsWithLMNByPhysicalOnly","countPhysicalSpinalRegions","UMNAndLMNInBrainstemByPhysicalOnly","containsTwoPhysicalFindingsInOneRegion","mostRostralFinding","findMostRostralFinding","console","log","gene","excluded","areBothFindingsPresentInOnePhysicalRegion","highestUMNFinding","calculateHighestPhysicalLevel","highestLMNFinding","highestFasicsFinding","highestFibsFinding","highestChronicDenervFinding","highestEMGFinding","Math","min","apply","isLMNFindingPresent","lmn","fibs","chronicDenerv","AwajiShima","fasics","GoldCoast","progressive","styles","tabs","background","bottom","slide","paddingTop","minHeight","color","display","justifyContent","Panel","state","index","handleChange","event","value","setState","props","changed","handleChangeIndex","react_default","a","createElement","lib_default","onChangeIndex","style","assign","slide3","findings","findings1","results","final","Tabs_default","variant","onChange","Tab_default","label","React","Component","diagnosisResults","className","title","additionalInfo","App","umn","isTiltNeeded","revealResults","yesColor","noColor","yesColorP","noColorP","yesColorE","noColorE","yesColorF","noColorF","changedHandler","p","objectSpread","target","checked","toConsumableArray","excludedButtonHandler","geneButtonHandler","tiltButtonHandler","yesButtonHandler","noButtonHandler","resetButtonHandler","window","location","reload","yesButtonHandlerProg","noButtonHandlerProg","yesButtonHandlerEx","noButtonHandlerEx","yesButtonHandlerFam","noButtonHandlerFam","getmostRostralFinding","elEDiag","airlieDiag","awajiDiag","goldCoastDiag","showResults","bind","assertThisInitialized","airlie","setDiagnosisStrategy","isTiltConfirmationNeeded","elE","awaji","gold","goldDiag","_this2","awajiInfo","vh","htpx","round","innerHeight","height","map","key","component_default","icons","name","Button_default","onClick","diagnosisResult","DiagnosisResults_DiagnosisResults","progdiv","exdiv","famdiv","Components_Panel_Panel","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.42affc7f.chunk.js","sourcesContent":["class Results {\r\n  constructor() {\r\n    this.diagnosis = null;\r\n    this.result = null;\r\n  }\r\n  setDiagnosisStrategy(diagnosis) {\r\n    this.diagnosis = diagnosis;\r\n    this.result = this.diagnosis.calculateDiagnosis();\r\n  }\r\n}\r\n\r\nexport default Results;\r\n","class ElEscorial {\r\n  constructor(selections) {\r\n    this.selections = selections;\r\n\r\n    this.UMNLevel = this.calcHighestLevel(\"umn\");\r\n    this.LMNLevel = this.calcHighestLevel(\"lmn\");\r\n\r\n    this.regionsWithUMN = this.countRegions(\"umn\");\r\n    this.regionsWithLMN = this.countRegions(\"lmn\");\r\n\r\n    this.spinalRegionsWithUMN = this.countSpinalRegions(\"umn\");\r\n    this.spinalRegionsWithLMN = this.countSpinalRegions(\"lmn\");\r\n\r\n    this.UMNAndLMNInBrainstem = this.containsTwoFindingsInOneRegion(\"umn\", \"lmn\", \"Brainstem\");\r\n  }\r\n\r\n  calculateDiagnosis() {\r\n    if (this.UMNAndLMNInBrainstem && this.spinalRegionsWithUMN >= 2 && this.spinalRegionsWithLMN >= 2) {\r\n      return {\r\n        diagnosis: \"Definite ALS\",\r\n        explanation: `This scenario is classified as definite ALS as there are upper motor \r\n                    neuron and lower motor neuron findings in the brainstem in addition to upper motor \r\n                    neuron and lower motor neuron signs in two or more spinal regions.`\r\n      };\r\n    }\r\n\r\n    if (this.spinalRegionsWithUMN === 3 && this.spinalRegionsWithLMN === 3) {\r\n      return {\r\n        diagnosis: \"Definite ALS\",\r\n        explanation: `This scenario is classified as Definite ALS as there are upper motor \r\n                    neuron and lower motor neuron findings in all three spinal regions.`\r\n      };\r\n    }\r\n\r\n    if (this.regionsWithUMN >= 2 && this.regionsWithLMN >= 2 && this.UMNLevel < this.LMNLevel) {\r\n      return {\r\n        diagnosis: \"Probable ALS\",\r\n        explanation: `This scenario is classified as Probable ALS as there are upper motor \r\n                    neuron and lower motor neuron findings in two or more regions and some upper motor \r\n                    neuron signs are rostral to lower motor neuron signs.`\r\n      };\r\n    }\r\n\r\n    if (\r\n      this.regionsWithUMN >= 2 &&\r\n      this.regionsWithLMN >= 2 &&\r\n      (this.UMNLevel < this.LMNLevel || this.selections.tilt)\r\n    ) {\r\n      return {\r\n        diagnosis: \"Probable ALS\",\r\n        explanation: `This scenario is classified as Probable ALS as there are upper motor \r\n                    neuron and lower motor neuron findings in two or more regions and some upper motor \r\n                    neuron signs are rostral to lower motor neuron signs.`\r\n      };\r\n    }\r\n\r\n    if (this.areBothFindingsPresentInOneRegion()) {\r\n      return {\r\n        diagnosis: \"Possible ALS\",\r\n        explanation: `This scenario is classified as Possible ALS as there are upper motor \r\n                    neuron and lower motor neuron signs “together” in one region.`\r\n      };\r\n    }\r\n\r\n    if (this.regionsWithUMN >= 2 && this.regionsWithLMN === 0) {\r\n      return {\r\n        diagnosis: \"Possible ALS\",\r\n        explanation: `This scenario is classified as Possible ALS as there are upper motor\r\n                     neuron signs “alone” in two or more regions.`\r\n      };\r\n    }\r\n\r\n    if (this.regionsWithUMN >= 2 && this.regionsWithLMN > 0) {\r\n      return {\r\n        diagnosis: \"Possible ALS or NIL - Please see explanation below\",\r\n        explanation: `This scenario is classified as Possible ALS as there are upper motor\r\n                     neuron signs “alone” in two or more regions. We interpret “alone” as meaning that\r\n                     these findings “on their own” would satisfy the criteria for possible ALS. If we interpret \r\n                     \"alone\" to mean absolutely NO lower motor neuron signs are present, the pattern would not fit within the El \r\n                     Escorial criteria classification scheme.`\r\n      };\r\n    }\r\n\r\n    if (this.UMNLevel > this.LMNLevel && this.regionsWithUMN > 1 && this.regionsWithLMN > 1) {\r\n      return {\r\n        diagnosis: \"Possible ALS\",\r\n        explanation: `This scenario is classified as Possible ALS as lower motor neuron \r\n                    signs are rostral to upper motor neuron signs.`\r\n      };\r\n    }\r\n\r\n    if (this.regionsWithLMN >= 2) {\r\n      return {\r\n        diagnosis: \"Suspected ALS\",\r\n        explanation: `This scenario is classified as Suspected ALS as there are lower \r\n                    motor neuron signs in two or more regions.`\r\n      };\r\n    }\r\n\r\n    return {\r\n      diagnosis: \"--\",\r\n      explanation: `A valid diagnosis is not available for the selected findings based\r\n                    on the El Escorial criteria.`\r\n    };\r\n  }\r\n\r\n  calcHighestLevel(finding) {\r\n    for (let i = 0; i < this.selections.regions.length; i++) {\r\n      if (this.isFindingPresent(finding, this.selections.regions[i].id)) {\r\n        return i;\r\n      }\r\n    }\r\n    return 5;\r\n  }\r\n\r\n  countRegions(finding) {\r\n    let count = 0;\r\n    for (let i = 0; i < this.selections.regions.length; i++) {\r\n      count += this.isFindingPresent(finding, this.selections.regions[i].id);\r\n    }\r\n\r\n    return count;\r\n  }\r\n\r\n  countSpinalRegions(finding) {\r\n    return this.countRegions(finding) - this.selections.regions[0][finding];\r\n  }\r\n\r\n  containsTwoFindingsInOneRegion(finding1, finding2, region) {\r\n    return this.isFindingPresent(finding1, region) && this.isFindingPresent(finding2, region);\r\n  }\r\n\r\n  areBothFindingsPresentInOneRegion() {\r\n    for (let i = 0; i < this.selections.regions.length; i++) {\r\n      if (this.containsTwoFindingsInOneRegion(\"umn\", \"lmn\", this.selections.regions[i].id)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  isFindingPresent(finding, region) {\r\n    return this.isPhysicalFindingPresent(finding, region);\r\n  }\r\n\r\n  isPhysicalFindingPresent(finding, region) {\r\n    const regionIndex = this.selections.regions.findIndex(r => {\r\n      return r.id === region;\r\n    });\r\n\r\n    return this.selections.regions[regionIndex][finding];\r\n  }\r\n}\r\n\r\nexport default ElEscorial;\r\n","import ElEscorial from \"./ElEscorial\";\r\n\r\nclass AirlieHouse extends ElEscorial {\r\n  constructor(selections) {\r\n    super(selections);\r\n\r\n    this.regionsWithLMNByPhysicalOnly = this.countPhysicalRegions(\"lmn\");\r\n    this.regionsWithLMNByEMGOnly = this.countLMNRegionsByEMG();\r\n    this.spinalRegionsWithLMNByPhysicalOnly = this.countPhysicalSpinalRegions(\"lmn\");\r\n    this.UMNAndLMNInBrainstemByPhysicalOnly = this.containsTwoPhysicalFindingsInOneRegion(\"umn\", \"lmn\", \"Brainstem\");\r\n    this.mostRostralFinding = this.findMostRostralFinding();\r\n  }\r\n\r\n  calculateDiagnosis() {\r\n    console.log(\"UMN regions: \" + this.regionsWithUMN);\r\n    console.log(\"LMN regions: \" + this.regionsWithLMN);\r\n    console.log(\"EMG LMN regions: \" + this.regionsWithLMNByEMGOnly);\r\n    console.log(\"Most rostral: \" + this.mostRostralFinding);\r\n    console.log(\"Tilt: \" + this.selections.tilt);\r\n\r\n    if (this.regionsWithUMN >= 1 && this.regionsWithLMN >= 1 && this.selections.gene) {\r\n      return {\r\n        diagnosis: \"Clinically Definite Familial ALS - Laboratory Supported\",\r\n        explanation: `This scenario is classified as Clinically Definite Familial\r\n                    ALS - Laboratory Supported as there are upper and lower motor neuron signs\r\n                    in at least a single region as well as a family history of a defined \r\n                    pathogenic mutation.`\r\n      };\r\n    }\r\n\r\n    if (\r\n      this.UMNAndLMNInBrainstemByPhysicalOnly &&\r\n      this.spinalRegionsWithUMN >= 2 &&\r\n      this.spinalRegionsWithLMNByPhysicalOnly >= 2\r\n    ) {\r\n      return {\r\n        diagnosis: \"Clinically Definite ALS\",\r\n        explanation: `This scenario is classified as Clinically Definite ALS as \r\n                    there are upper motor neuron and lower motor neuron findings in the\r\n                    brainstem as well as upper motor neuron and lower motor neuron findings\r\n                    in two or more spinal regions.`\r\n      };\r\n    }\r\n\r\n    if (this.spinalRegionsWithUMN === 3 && this.spinalRegionsWithLMNByPhysicalOnly === 3) {\r\n      return {\r\n        diagnosis: \"Clinically Definite ALS\",\r\n        explanation: `This scenario is classified as Clinically Definite ALS as\r\n                    there are upper motor neuron and lower motor neuron findings in all \r\n                    three spinal regions.`\r\n      };\r\n    }\r\n\r\n    if (\r\n      this.regionsWithUMN >= 2 &&\r\n      this.regionsWithLMNByPhysicalOnly >= 2 &&\r\n      (this.mostRostralFinding === \"UMN\" || (this.mostRostralFinding === \"uncertain\" && this.selections.tilt))\r\n    ) {\r\n      return {\r\n        diagnosis: \"Clinically Probable ALS\",\r\n        explanation: `This scenario is classified as Clinically Probable ALS as\r\n                        there are upper motor neuron and lower motor neuron findings in two or \r\n                        more regions and some upper motor neuron signs are rostral to lower \r\n                        motor neuron signs.`\r\n      };\r\n    }\r\n\r\n    if (\r\n      (this.regionsWithUMN === 1 && this.regionsWithLMNByPhysicalOnly === 1 && \r\n        this.UMNLevel === this.LMNLevel && this.selections.excluded) ||\r\n      (this.regionsWithUMN >= 1 &&\r\n        this.regionsWithLMNByEMGOnly >= 2 && this.selections.excluded)\r\n    ) {\r\n      return {\r\n        diagnosis: \"Clinically Probable ALS - Laboratory Supported\",\r\n        explanation: `This scenario is classified as Clinically Probable \r\n                        ALS - Laboratory Supported as there are clinical signs of:\r\n                        1. UMN and LMN dysfunction are in only one region, OR \r\n                        2. When UMN signs alone are present in one region, AND LMN signs defined by EMG criteria\r\n                        are present in at least two regions, \r\n                        3. With proper application of neuroimaging and clinical laboratory protocols to exclude other causes.`\r\n      };\r\n    }\r\n\r\n    if (this.areBothFindingsPresentInOnePhysicalRegion()) {\r\n      return {\r\n        diagnosis: \"Clinically Possible ALS\",\r\n        explanation: `This scenario is classified as Clinically Possible \r\n                    ALS as there are upper motor neuron and lower motor neuron signs \r\n                    in one region.`\r\n      };\r\n    }\r\n\r\n    if (this.regionsWithUMN >= 2 && this.regionsWithLMN === 0) {\r\n      return {\r\n        diagnosis: \"Clinically Possible ALS\",\r\n        explanation: `This scenario is classified as Possible ALS as there are upper motor\r\n                     neuron signs “alone” in two or more regions.`\r\n      };\r\n    }\r\n\r\n    if (this.regionsWithUMN >= 2 && this.regionsWithLMN > 0) {\r\n      return {\r\n        diagnosis: \"Clinically Possible ALS or NIL - Please see explanation below\",\r\n        explanation: `This scenario is classified as Possible ALS as there are upper motor\r\n                     neuron signs “alone” in two or more regions. We interpret “alone” as meaning that\r\n                     these findings “on their own” would satisfy the criteria for possible ALS. If we interpret \r\n                     \"alone\" to mean absolutely NO lower motor neuron signs are present, the pattern would not fit within the El Escorial Revised (Airlie House)\r\n                     criteria classification scheme.`\r\n      };\r\n    }\r\n\r\n    if (this.UMNLevel > this.LMNLevel && this.regionsWithUMN > 1 && this.regionsWithLMN > 1) {\r\n      return {\r\n        diagnosis: \"Clinically Possible ALS\",\r\n        explanation: `This scenario is classified as Clinically Possible \r\n                    ALS as lower motor neuron signs are rostral to upper motor \r\n                    neuron signs.`\r\n      };\r\n    }\r\n\r\n    return {\r\n      diagnosis: \"--\",\r\n      explanation: `A valid diagnosis is not available for the selected findings based\r\n                on the El Escorial revised (Airlie House) criteria.`\r\n    };\r\n  }\r\n\r\n  findMostRostralFinding() {\r\n    const highestUMNFinding = this.calculateHighestPhysicalLevel(\"umn\");\r\n    const highestLMNFinding = this.calculateHighestPhysicalLevel(\"lmn\");\r\n\r\n    const highestFasicsFinding = this.calculateHighestPhysicalLevel(\"fasics\");\r\n    const highestFibsFinding = this.calculateHighestPhysicalLevel(\"fibs\");\r\n    const highestChronicDenervFinding = this.calculateHighestPhysicalLevel(\"chronicDenerv\");\r\n\r\n    let highestEMGFinding = Math.min(...[highestFasicsFinding, highestFibsFinding, highestChronicDenervFinding]);\r\n\r\n    if (highestLMNFinding < highestUMNFinding) {\r\n      return \"LMN\";\r\n    }\r\n\r\n    if (highestUMNFinding < Math.min(...[highestLMNFinding, highestEMGFinding])) {\r\n      return \"UMN\";\r\n    }\r\n\r\n    if (highestUMNFinding === 5) {\r\n      return \"not selected\";\r\n    }\r\n\r\n    return \"uncertain\";\r\n  }\r\n\r\n  isTiltConfirmationNeeded() {\r\n    return this.mostRostralFinding === \"uncertain\";\r\n  }\r\n\r\n  calculateHighestPhysicalLevel(finding) {\r\n    for (let i = 0; i < this.selections.regions.length; i++) {\r\n      if (this.isPhysicalFindingPresent(finding, this.selections.regions[i].id)) {\r\n        return i;\r\n      }\r\n    }\r\n    return 5;\r\n  }\r\n\r\n  countPhysicalRegions(finding) {\r\n    let count = 0;\r\n    for (let i = 0; i < this.selections.regions.length; i++) {\r\n      count += this.isPhysicalFindingPresent(finding, this.selections.regions[i].id);\r\n    }\r\n\r\n    return count;\r\n  }\r\n\r\n  countPhysicalSpinalRegions(finding) {\r\n    return this.countPhysicalRegions(finding) - this.selections.regions[0][finding];\r\n  }\r\n\r\n  isFindingPresent(finding, region) {\r\n    if (finding === \"lmn\") {\r\n      return this.isLMNFindingPresent(region);\r\n    } else {\r\n      return this.isPhysicalFindingPresent(finding, region);\r\n    }\r\n  }\r\n\r\n  isLMNFindingPresent(region) {\r\n    const regionIndex = this.selections.regions.findIndex(r => {\r\n      return r.id === region;\r\n    });\r\n\r\n    return (\r\n      this.selections.regions[regionIndex].lmn ||\r\n      (this.selections.regions[regionIndex].fibs && this.selections.regions[regionIndex].chronicDenerv)\r\n    );\r\n  }\r\n\r\n  countLMNRegionsByEMG() {\r\n    let count = 0;\r\n\r\n    for (let i = 0; i < this.selections.regions.length; i++) {\r\n      count +=\r\n        this.isFindingPresent(\"fibs\", this.selections.regions[i].id) &&\r\n        this.isFindingPresent(\"chronicDenerv\", this.selections.regions[i].id);\r\n    }\r\n\r\n    return count;\r\n  }\r\n  containsTwoPhysicalFindingsInOneRegion(finding1, finding2, region) {\r\n    return this.isPhysicalFindingPresent(finding1, region) && this.isPhysicalFindingPresent(finding2, region);\r\n  }\r\n\r\n  areBothFindingsPresentInOnePhysicalRegion() {\r\n    for (let i = 0; i < this.selections.regions.length; i++) {\r\n      if (this.containsTwoPhysicalFindingsInOneRegion(\"umn\", \"lmn\", this.selections.regions[i].id)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nexport default AirlieHouse;\r\n","import AirlieHouse from \"./AirlieHouse\";\r\n\r\nclass AwajiShima extends AirlieHouse {\r\n  calculateDiagnosis() {\r\n    if (this.regionsWithUMN >= 1 && this.regionsWithLMN >= 1 && this.selections.gene) {\r\n      return {\r\n        diagnosis: \"Clinically Definite Familial ALS - Laboratory Supported\",\r\n        explanation: `This scenario is classified as Clinically Definite Familial \r\n                    ALS - Laboratory Supported as there are upper and lower motor neuron signs \r\n                    in at least a single region as well as a family history of a defined \r\n                    pathogenic mutation. This scenario is not specifically mentioned in the article \r\n                    but might be presumed to be obeying the \"Principles (from the Airlie House criteria)\"`\r\n      };\r\n    }\r\n\r\n    if (this.UMNAndLMNInBrainstem && this.spinalRegionsWithUMN >= 2 && this.spinalRegionsWithLMN >= 2) {\r\n      return {\r\n        diagnosis: \"Clinically Definite ALS\",\r\n        explanation: `This scenario is classified as Clinically Definite ALS \r\n                    as there are upper motor neuron and lower motor neuron findings in \r\n                    the brainstem as well as upper motor neuron and lower motor neuron \r\n                    findings in two or more spinal regions.`\r\n      };\r\n    }\r\n\r\n    if (this.spinalRegionsWithUMN === 3 && this.spinalRegionsWithLMN >= 3) {\r\n      return {\r\n        diagnosis: \"Clinically Definite ALS\",\r\n        explanation: `This scenario is classified as Clinically Definite ALS as there are \r\n                    upper motor neuron and lower motor neuron findings in all three spinal regions.`\r\n      };\r\n    }\r\n\r\n    if (\r\n      this.regionsWithUMN >= 2 &&\r\n      this.regionsWithLMN >= 2 &&\r\n      (this.mostRostralFinding === \"UMN\" || (this.mostRostralFinding === \"uncertain\" && this.selections.tilt))\r\n    ) {\r\n      return {\r\n        diagnosis: \"Clinically Probable ALS\",\r\n        explanation: `This scenario is classified as Clinically Probable ALS as there \r\n                are upper motor neuron and lower motor neuron findings in two or more regions \r\n                and some upper motor neuron signs are rostral to lower motor neuron signs.`\r\n      };\r\n    }\r\n\r\n    if (this.areBothFindingsPresentInOneRegion()) {\r\n      return {\r\n        diagnosis: \"Clinically Possible ALS\",\r\n        explanation: `This scenario is classified as Clinically Possible ALS as \r\n                there are upper motor neuron and lower motor neuron signs together in one region.`\r\n      };\r\n    }\r\n\r\n    if (this.regionsWithUMN >= 2 && this.regionsWithLMN === 0) {\r\n      return {\r\n        diagnosis: \"Clinically Possible ALS\",\r\n        explanation: `This scenario is classified as Possible ALS as there are upper motor\r\n                     neuron signs “alone” in two or more regions.`\r\n      };\r\n    }\r\n\r\n    if (this.regionsWithUMN >= 2 && this.regionsWithLMN > 0) {\r\n      return {\r\n        diagnosis: \"Clinically Possible ALS or NIL - Please see explanation below\",\r\n        explanation: `This scenario is classified as Possible ALS as there are upper motor\r\n                     neuron signs “alone” in two or more regions. We interpret “alone” as meaning that\r\n                     these findings “on their own” would satisfy the criteria for possible ALS. If we interpret \r\n                     \"alone\" to mean absolutely NO lower motor neuron signs are present, the pattern would not fit within the Awaji-Shima\r\n                     criteria classification scheme.`\r\n      };\r\n    }\r\n\r\n    if (this.UMNLevel > this.LMNLevel && this.regionsWithUMN > 1 && this.regionsWithLMN > 1) {\r\n      return {\r\n        diagnosis: \"Clinically Possible ALS\",\r\n        explanation: `This scenario is classified as Clinically Possible ALS \r\n                as lower motor neuron signs are rostral to upper motor neuron signs.`\r\n      };\r\n    }\r\n\r\n    return {\r\n      diagnosis: \"--\",\r\n      explanation: `A valid diagnosis is not available for the selected findings based\r\n                on the Awaji-Shima criteria.`\r\n    };\r\n  }\r\n\r\n  isLMNFindingPresent(region) {\r\n    const regionIndex = this.selections.regions.findIndex(r => {\r\n      return r.id === region;\r\n    });\r\n\r\n    return (\r\n      this.selections.regions[regionIndex].lmn ||\r\n      (this.selections.regions[regionIndex].chronicDenerv &&\r\n        (this.selections.regions[regionIndex].fasics || this.selections.regions[regionIndex].fibs))\r\n    );\r\n  }\r\n}\r\n\r\nexport default AwajiShima;\r\n","import AwajiShima from \"./AwajiShima\";\r\n\r\nclass GoldCoast extends AwajiShima {\r\n\r\n  calculateDiagnosis() {\r\n\r\n    console.log(\"Progressive: \" + this.selections.progressive);\r\n\r\n\r\n    if (this.regionsWithLMN >= 2 && \r\n         this.selections.progressive) {\r\n      return {\r\n        diagnosis:  \"ALS\",\r\n        explanation: `This scenario is classified as  \r\n                    ALS as there is lower motor neuron dysfunction in at least 2 body regions.`\r\n      };\r\n    }\r\n\r\n    if (this.regionsWithUMN === 1 && this.regionsWithLMN === 1 && \r\n        this.UMNLevel === this.LMNLevel && this.selections.progressive) {\r\n      return {\r\n        diagnosis:  \"ALS\",\r\n        explanation: `This scenario is classified as  \r\n                    ALS as there is upper and lower motor neuron dysfunction noted in the same body region.`\r\n      };\r\n    }\r\n    \r\n    return {\r\n      diagnosis: \"--\",\r\n      explanation: `A valid diagnosis is not available for the selected findings based\r\n                on the Gold Coast criteria.`\r\n    };\r\n  }\r\n\r\n  isLMNFindingPresent(region) {\r\n    const regionIndex = this.selections.regions.findIndex(r => {\r\n      return r.id === region;\r\n    });\r\n\r\n    return (\r\n      this.selections.regions[regionIndex].lmn ||\r\n      (this.selections.regions[regionIndex].chronicDenerv &&\r\n        (this.selections.regions[regionIndex].fasics || this.selections.regions[regionIndex].fibs))\r\n    );\r\n  }\r\n}\r\n\r\nexport default GoldCoast;\r\n","import React from \"react\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport SwipeableViews from \"react-swipeable-views\";\r\n\r\nconst styles = {\r\n  tabs: {\r\n    background: \"#bfbfbf\",\r\n    bottom: \"0px\"\r\n  },\r\n\r\n  slide: {\r\n    paddingTop: 0,\r\n    minHeight: 0,\r\n    color: \"#000\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\"\r\n  }\r\n};\r\n\r\nclass Panel extends React.Component {\r\n  state = {\r\n    index: 0\r\n  };\r\n\r\n  handleChange = (event, value) => {\r\n    this.setState({\r\n      index: value\r\n    });\r\n    this.props.changed();\r\n  };\r\n\r\n  handleChangeIndex = index => {\r\n    this.setState({\r\n      index\r\n    });\r\n    this.props.changed();\r\n\r\n  };\r\n\r\n  render() {\r\n    const { index } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <SwipeableViews index={index} onChangeIndex={this.handleChangeIndex}>\r\n          {/* Is where we arrange order for findings and results at the bottom of the panel. */}\r\n          <div style={Object.assign({}, styles.slide, styles.slide3)}>{this.props.findings}</div>\r\n          <div style={Object.assign({}, styles.slide, styles.slide3)}>{this.props.findings1}</div>\r\n\r\n          <div style={Object.assign({}, styles.slide, styles.slide3)}>{this.props.results}</div>\r\n          <div style={Object.assign({}, styles.slide, styles.slide3)}>{this.props.final}</div>\r\n\r\n        </SwipeableViews>\r\n        <Tabs value={index} variant=\"fullWidth\" onChange={this.handleChange} style={styles.tabs}>\r\n          <Tab label=\"Physical\" />\r\n          <Tab label=\"Lab\" />\r\n          <Tab label=\"Additional\" />\r\n          <Tab label=\"Calculation\" />\r\n        </Tabs>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Panel;\r\n","import React from \"react\";\r\nimport \"./DiagnosisResults.css\";\r\n\r\nconst diagnosisResults = props => {\r\n  return (\r\n    <div>\r\n      <div className=\"criteriaName\">{props.title}</div>\r\n      <div className=\"diagnosis\">{props.diagnosis}</div>\r\n      <div className=\"explanation\">\r\n        {props.explanation} <br />\r\n        {props.additionalInfo}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default diagnosisResults;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\n// import { Toggle } from \"react-toggle-component\"; //old one \r\n// import { Toggle } from \"react-toggle\";\r\nimport Toggle from 'react-toggle' //new react toggle\r\nimport \"react-toggle/style.css\"\r\nimport Results from \"./Model/Results\";\r\nimport ElEscorial from \"./Model/ElEscorial\";\r\nimport AirlieHouse from \"./Model/AirlieHouse\";\r\nimport AwajiShima from \"./Model/AwajiShima\";\r\nimport GoldCoast from \"./Model/GoldCoast\";\r\nimport Panel from \"./Components/Panel/Panel\";\r\nimport DiagnosisResults from \"./Components/DiagnosisResults/DiagnosisResults\";\r\nimport Button from \"@material-ui/core/Button\";\r\n/* import { createMuiTheme } from \"@material-ui/core/styles\";\r\n\r\nimport lightBlue from \"@material-ui/core/colors/lightBlue\";\r\nimport pink from \"@material-ui/core/colors/pink\";\r\n */\r\n// const muiTheme = createMuiTheme({ palette: { primary: lightBlue, secondary: pink } });\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    // Super means will get props from Component (from the parent class). JavaScript enforces that if you want to use this in a constructor, you have to call super first\r\n    super(props);\r\n    this.results = new Results();\r\n    this.elEDiag = null;\r\n    this.airlieDiag = null;\r\n    this.awajiDiag = null;\r\n    this.goldCoastDiag = null;\r\n    this.mostRostralFinding = \"\";\r\n\r\n    // The third approach. Binds this makes sure functions have access to component attributes\r\n    this.showResults = this.showResults.bind(this);\r\n    this.yesButtonHandler = this.yesButtonHandler.bind(this);\r\n    this.noButtonHandler = this.noButtonHandler.bind(this);\r\n    this.yesButtonHandlerProg = this.yesButtonHandlerProg.bind(this);\r\n    this.noButtonHandlerProg = this.noButtonHandlerProg.bind(this);\r\n    this.yesButtonHandlerEx = this.yesButtonHandlerEx.bind(this);\r\n    this.noButtonHandlerEx = this.noButtonHandlerEx.bind(this);\r\n    this.yesButtonHandlerFam = this.yesButtonHandlerFam.bind(this);\r\n    this.noButtonHandlerFam = this.noButtonHandlerFam.bind(this);\r\n\r\n  }\r\n\r\n  state = {\r\n    regions: [\r\n      { id: \"Brainstem\", umn: false, lmn: false, fibs: false, fasics: false, chronicDenerv: false },\r\n      { id: \"Cervical\", umn: false, lmn: false, fibs: false, fasics: false, chronicDenerv: false },\r\n      { id: \"Thoracic\", umn: false, lmn: false, fibs: false, fasics: false, chronicDenerv: false },\r\n      { id: \"Lumbosacral\", umn: false, lmn: false, fibs: false, fasics: false, chronicDenerv: false }\r\n    ],\r\n\r\n    excluded: true,\r\n    gene: false,\r\n    tilt: false,\r\n    progressive: null,\r\n\r\n    isTiltNeeded: null,\r\n    revealResults: true,\r\n\r\n    yesColor: \"default\",\r\n    noColor: \"default\",\r\n    yesColorP: \"default\",\r\n    noColorP: \"default\",\r\n    yesColorE: \"primary\",\r\n    noColorE: \"default\",\r\n    yesColorF: \"default\",\r\n    noColorF: \"primary\"\r\n\r\n  };\r\n\r\n  // For toggle button change and assigning new state\r\n  changedHandler = (event, id, finding) => {\r\n    const regionIndex = this.state.regions.findIndex(p => {\r\n      return p.id === id;\r\n    });\r\n\r\n    const region = {\r\n      ...this.state.regions[regionIndex]\r\n    };\r\n\r\n    // The switch/case statement is a conditional operator that’s commonly used as an alternative to if...else statement. if-else statements don't work inside JSX. This is because JSX is just syntactic sugar for function calls and object construction.\r\n\r\n    switch (finding) {\r\n      case 0:\r\n        region.umn = event.target.checked;\r\n        break;\r\n      case 1:\r\n        region.lmn = event.target.checked;\r\n        break;\r\n      case 2:\r\n        region.fibs = event.target.checked;\r\n        break;\r\n      case 3:\r\n        region.fasics = event.target.checked;\r\n        break;\r\n      case 4:\r\n        region.chronicDenerv = event.target.checked;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    const regions = [...this.state.regions];\r\n\r\n    regions[regionIndex] = region;\r\n\r\n    this.setState({ regions: regions });\r\n  };\r\n\r\n  excludedButtonHandler = event => {\r\n    this.setState({ excluded: event.target.checked });\r\n  };\r\n\r\n  geneButtonHandler = event => {\r\n    this.setState({ gene: event.target.checked });\r\n  };\r\n\r\n  tiltButtonHandler = event => {\r\n    this.setState({ tilt: event.target.checked });\r\n  };\r\n\r\n  yesButtonHandler = () => {\r\n    this.setState({ tilt: true, revealResults: true, yesColor: \"primary\", noColor: \"default\" });\r\n    // this.setState({ revealResults: true })\r\n  };\r\n\r\n  noButtonHandler = () => {\r\n    this.setState({ tilt: false, revealResults: true, yesColor: \"default\", noColor: \"primary\" });\r\n  };\r\n\r\n  resetButtonHandler = () => {\r\n    window.location.reload();\r\n  };\r\n\r\n  yesButtonHandlerProg = () => {\r\n    this.setState({ progressive: true, revealResults: true, yesColorP: \"primary\", noColorP: \"default\" });\r\n    // this.setState({ revealResults: true })\r\n  };\r\n\r\n  noButtonHandlerProg = () => {\r\n    this.setState({ progressive: false, revealResults: true, yesColorP: \"default\", noColorP: \"primary\" });\r\n  };\r\n\r\n  yesButtonHandlerEx = () => {\r\n    this.setState({ excluded: true, revealResults: true, yesColorE: \"primary\", noColorE: \"default\" });\r\n    // this.setState({ revealResults: true })\r\n  };\r\n\r\n  noButtonHandlerEx = () => {\r\n    this.setState({ excluded: false, revealResults: true, yesColorE: \"default\", noColorE: \"primary\" });\r\n  };\r\n\r\n  yesButtonHandlerFam = () => {\r\n    this.setState({ gene: true, revealResults: true, yesColorF: \"primary\", noColorF: \"default\" });\r\n    // this.setState({ revealResults: true })\r\n  };\r\n\r\n  noButtonHandlerFam = () => {\r\n    this.setState({ gene: false, revealResults: true, yesColorF: \"default\", noColorF: \"primary\" });\r\n  };\r\n\r\n  getmostRostralFinding = () => {\r\n    if (this.state.isTiltNeeded) {\r\n      switch (this.state.tilt) {\r\n        case true:\r\n          return `The most rostral findings were chosen to be UMN.`;\r\n        case false:\r\n          return `The most rostral findings were chosen to be LMN.`;\r\n        default:\r\n          return null;\r\n      }\r\n    }\r\n\r\n    return (\r\n      `Based on the selected values, the program determined \r\n            that the most rostral findings were ` +\r\n      this.mostRostralFinding +\r\n      \".\"\r\n    );\r\n  };\r\n\r\n  showResults() {\r\n    this.setState({ yesColor: \"default\", noColor: \"default\" });\r\n\r\n    const airlie = new AirlieHouse(this.state);\r\n\r\n    this.results.setDiagnosisStrategy(airlie);\r\n\r\n    this.mostRostralFinding = this.results.diagnosis.mostRostralFinding;\r\n\r\n    this.setState({ isTiltNeeded: this.results.diagnosis.isTiltConfirmationNeeded() });\r\n\r\n    if (this.results.diagnosis.isTiltConfirmationNeeded()) {\r\n      this.setState({ revealResults: true });\r\n    } else {\r\n      this.setState({ revealResults: true });\r\n    }\r\n  }\r\n\r\n  // For the last page\r\n  revealResults() {\r\n    const elE = new ElEscorial(this.state);\r\n    const airlie = new AirlieHouse(this.state);\r\n    const awaji = new AwajiShima(this.state);\r\n    const gold = new GoldCoast(this.state);\r\n\r\n    this.results.setDiagnosisStrategy(elE);\r\n\r\n    this.elEDiag = this.results.result;\r\n\r\n    this.results.setDiagnosisStrategy(airlie);\r\n\r\n    this.airlieDiag = this.results.result;\r\n\r\n    this.results.setDiagnosisStrategy(awaji);\r\n\r\n    this.awajiDiag = this.results.result;\r\n\r\n    this.results.setDiagnosisStrategy(gold);\r\n\r\n    this.goldDiag = this.results.result;\r\n  }\r\n\r\n  render() {\r\n    let awajiInfo = `Lower motor neuron (LMN) findings can be any of the following: 1. LMN clinical findings, 2. \r\n                    (fibrillations/positive sharp waves AND chronic denervation), OR\r\n                    3. (fasciculations AND chronic denervation).`;\r\n\r\n    let geneMessage = `A familial history of ALS is present, and a pathogenic \r\n      gene mutation in the patient has been identified:`;\r\n\r\n    let excludedMessage = `Other causes have been excluded with proper application of neuroimaging and clinical laboratory protocols:`;\r\n\r\n    // find and determine height of physical\r\n    function vhToPixels (vh) {\r\n      return Math.round(window.innerHeight / (100 / vh));\r\n    }  \r\n    let ht100 = vhToPixels(100)\r\n    let ht = ht100 - 134\r\n    let htpx = ht + 'px';\r\n    let findings = (\r\n      <div className=\"physical\" style={{\"height\" : htpx}} >\r\n        <div className=\"titles\">\r\n          {/* Puts title across the top of the table */}\r\n          <span className=\"region\"><br />UMN</span>\r\n          <span className=\"region\">LMN</span>\r\n          {/* <span className=\"region\">Fibs/ PSW</span>\r\n          <span className=\"region\">Fasciculations</span>\r\n          <span className=\"region\">Neurogenic Potentials/Chronic Denervation</span> */}\r\n        </div>\r\n\r\n        <div className=\"selectors\">\r\n          {this.state.regions.map(region => {\r\n            return (\r\n              <div key={region.id}>\r\n                {/* Region.id e.g. cervical */}\r\n                <span className=\"regionName\">{region.id}</span>\r\n\r\n                <span className=\"toggle\">\r\n                  <Toggle\r\n                   icons={false}\r\n\r\n                   name={region.id + \"umn\"}\r\n                    onChange={event => this.changedHandler(event, region.id, 0)}\r\n                    // umn defined in class regions at the beginning\r\n                    checked={region.umn}\r\n                  />\r\n                </span>\r\n\r\n                {/* <Toggle\r\n    defaultChecked={this.state.tofuIsReady}\r\n    icons={false}\r\n    onChange={this.handleTofuChange} /> */}\r\n\r\n                <span className=\"toggle\">\r\n                  <Toggle\r\n                    className=\"toggle\"\r\n                    icons={false}\r\n\r\n                    name={region.id + \"lmn\"}\r\n                    onChange={event => this.changedHandler(event, region.id, 1)}\r\n                    checked={region.lmn}\r\n                  />\r\n                </span>\r\n                <hr />\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n\r\n        {/* <div className=\"excluded\">               \r\n          <span>\r\n            {excludedMessage}\r\n            <Toggle\r\n              className=\"excludedToggle\"\r\n              name=\"excluded\"\r\n              onChange={event => this.excludedButtonHandler(event)}\r\n              checked={this.state.excluded}\r\n            />\r\n          </span>\r\n        </div> */}\r\n\r\n        <div className=\"reset\">\r\n          <Button className=\"resetButton\" variant=\"outlined\" onClick={() => this.resetButtonHandler()}>\r\n            Reset All\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    let findings1 = (\r\n      <div className=\"physical\" style={{\"height\" : htpx}}>\r\n        <div className=\"titles\">\r\n          {/* Puts title across the top of the table */}\r\n          {/* <span className=\"region\">UMN</span>\r\n          <span className=\"region\">LMN</span> */}\r\n          <span className=\"region\">Fibs/ PSW</span>\r\n          <span className=\"region\">Fascics</span>\r\n          <span className=\"region\">Chronic Denervation</span>\r\n        </div>\r\n\r\n        <div className=\"selectors\">\r\n          {this.state.regions.map(region => {\r\n            return (\r\n              <div key={region.id}>\r\n                <span className=\"regionName\">{region.id}</span>\r\n\r\n                <span className=\"toggle\">\r\n                  <Toggle\r\n                    className=\"toggle\"\r\n                    icons={false}\r\n\r\n                    name={region.id + \"fibs\"}\r\n                    onChange={event => this.changedHandler(event, region.id, 2)}\r\n                    checked={region.fibs}\r\n                  />\r\n                </span>\r\n\r\n                <span className=\"toggle\">\r\n                  <Toggle\r\n                    className=\"toggle\"\r\n                    icons={false}\r\n\r\n                    name={region.id + \"fasics\"}\r\n                    onChange={event => this.changedHandler(event, region.id, 3)}\r\n                    checked={region.fasics}\r\n                  />\r\n                </span>\r\n\r\n                <span className=\"toggle\">\r\n                  <Toggle\r\n                    className=\"toggle\"\r\n                    icons={false}\r\n\r\n                    name={region.id + \"chronic\"}\r\n                    onChange={event => this.changedHandler(event, region.id, 4)}\r\n                    checked={region.chronicDenerv}\r\n                  />\r\n                </span>\r\n\r\n                <hr />\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n\r\n        {/* <div className=\"gene\">\r\n          <span>\r\n            {geneMessage}\r\n            <Toggle\r\n              className=\"geneToggle\"\r\n              name=\"gene\"\r\n              onChange={event => this.geneButtonHandler(event)}\r\n              checked={this.state.gene}\r\n            />\r\n          </span>\r\n        </div> */}\r\n\r\n        <div className=\"reset\">\r\n          <Button className=\"resetButton\" variant=\"outlined\" onClick={() => this.resetButtonHandler()}>\r\n            Reset All\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    let diagnosisResult = null;\r\n\r\n    if (this.state.revealResults) {\r\n      this.revealResults();\r\n\r\n      diagnosisResult = (\r\n        <div className=\"diagResults\">\r\n          {/* This div class name is not found */}\r\n          <div className=\"rostralFinding\">\r\n            {/* Statement on whether or UMN or LMN or null */}\r\n            <p>{this.getmostRostralFinding()}</p>\r\n          </div>\r\n\r\n          <hr />\r\n\r\n{/* From that component */}\r\n          <DiagnosisResults\r\n            title=\"El Escorial (1994)\"\r\n            diagnosis={this.elEDiag.diagnosis}\r\n            explanation={this.elEDiag.explanation}\r\n          />\r\n\r\n          <hr />\r\n\r\n          <DiagnosisResults\r\n            title=\"El Escorial Revised (Airlie House) (2000)\"\r\n            diagnosis={this.airlieDiag.diagnosis}\r\n            explanation={this.airlieDiag.explanation}\r\n          />\r\n\r\n          <hr />\r\n\r\n          <DiagnosisResults\r\n            title=\"Awaji-Shima (2008)\"\r\n            diagnosis={this.awajiDiag.diagnosis}\r\n            explanation={this.awajiDiag.explanation}\r\n            additionalInfo={awajiInfo}\r\n          />\r\n\r\n<hr />\r\n\r\n          <DiagnosisResults\r\n            title=\"Gold Coast (2020)\"\r\n            diagnosis={this.goldDiag.diagnosis}\r\n            explanation={this.goldDiag.explanation}\r\n            additionalInfo={awajiInfo}\r\n          />\r\n          <hr />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    let results = null;\r\n\r\n    let progdiv = (\r\n      <div className=\"prog\">\r\n      Has the patient experienced progressive motor impairment documented by history or repeated clinical assessment, \r\n      preceded by normal motor function?\r\n      <br />\r\n\r\n        <div className=\"progButtons\">\r\n          <Button variant=\"contained\" color={this.state.yesColorP} onClick={() => this.yesButtonHandlerProg()}>\r\n            Yes\r\n          </Button>\r\n\r\n          <Button variant=\"contained\" color={this.state.noColorP} onClick={() => this.noButtonHandlerProg()}>\r\n            No\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    )\r\n\r\n    let exdiv = (\r\n      <div className=\"prog\">\r\n     {excludedMessage}\r\n      <br />\r\n\r\n        <div className=\"progButtons\">\r\n          <Button variant=\"contained\" color={this.state.yesColorE} onClick={() => this.yesButtonHandlerEx()}>\r\n            Yes\r\n          </Button>\r\n\r\n          <Button variant=\"contained\" color={this.state.noColorE} onClick={() => this.noButtonHandlerEx()}>\r\n            No\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    )\r\n\r\n    let famdiv = (\r\n      <div className=\"prog\">\r\n     {geneMessage}\r\n      <br />\r\n\r\n        <div className=\"progButtons\">\r\n          <Button variant=\"contained\" color={this.state.yesColorF} onClick={() => this.yesButtonHandlerFam()}>\r\n            Yes\r\n          </Button>\r\n\r\n          <Button variant=\"contained\" color={this.state.noColorF} onClick={() => this.noButtonHandlerFam()}>\r\n            No\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    )\r\n\r\n    if (this.state.isTiltNeeded) {\r\n      results = (\r\n        <div className=\"results\">\r\n          <div className=\"tilt\">\r\n            On review, does the patient have any upper motor neuron findings rostral (i.e above) to lower motor neuron\r\n            findings?\r\n            {/* <br /> */}\r\n            <div className=\"tiltButtons\">\r\n              <Button variant=\"contained\" color={this.state.yesColor} onClick={() => this.yesButtonHandler()}>\r\n                Yes\r\n              </Button>\r\n\r\n              <Button variant=\"contained\" color={this.state.noColor} onClick={() => this.noButtonHandler()}>\r\n                No\r\n              </Button>\r\n            </div>\r\n          </div>\r\n\r\n{progdiv}\r\n{exdiv}\r\n{famdiv}\r\n        </div>\r\n      );\r\n    } else {\r\n      results = <div className=\"results\">\r\n\r\n{progdiv}\r\n{exdiv}\r\n{famdiv}\r\n        </div>;\r\n    }\r\n\r\n    let final = (\r\n      <div className=\"results\">\r\n        {diagnosisResult}\r\n      </div>\r\n         \r\n        );\r\nconsole.log(\"RevealResults: \" + this.state.revealResults);\r\n\r\n\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"title\">\r\n          {/* Title at the top of the page */}\r\n          <h1>ALS Calculator</h1>\r\n        </div>\r\n\r\n        <Panel findings={findings} findings1={findings1} results={results} final={final} changed={this.showResults} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// Exports this as a component\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\"No internet connection found. App is running in offline mode.\");\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}